import { Map, fromJS, toJS } from 'immutable'

export default function extractData() {
  let raw = `
  {
    "scope": "plain.text.zs, source.zs",
 
    "completions":
    [
       { "trigger": "addRitualtmods.abyssalcraft.CreationRitual", "contents": "mods.abyssalcraft.CreationRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, item, offerings...);" },
       { "trigger": "addRitualtmods.abyssalcraft.CreationRitual", "contents": "mods.abyssalcraft.CreationRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, item, offerings[], nbt);" },
       { "trigger": "removeRitualtmods.abyssalcraft.CreationRitual", "contents": "mods.abyssalcraft.CreationRitual.removeRitual(item);" },
       { "trigger": "addCrystallizationtmods.abyssalcraft.Crystallizer", "contents": "mods.abyssalcraft.Crystallizer.addCrystallization(input, output1, output2, exp);" },
       { "trigger": "addSingleCrystallizationtmods.abyssalcraft.Crystallizer", "contents": "mods.abyssalcraft.Crystallizer.addSingleCrystallization(input, output, exp);" },
       { "trigger": "removeCrystallizationtmods.abyssalcraft.Crystallizer", "contents": "mods.abyssalcraft.Crystallizer.removeCrystallization(input);" },
       { "trigger": "addRitualtmods.abyssalcraft.EnchantmentRitual", "contents": "mods.abyssalcraft.EnchantmentRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, enchantment, offerings[]);" },
       { "trigger": "addRitualtmods.abyssalcraft.EnchantmentRitual", "contents": "mods.abyssalcraft.EnchantmentRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, enchantment, offerings[], nbt);" },
       { "trigger": "removeRitualtmods.abyssalcraft.EnchantmentRitual", "contents": "mods.abyssalcraft.EnchantmentRitual.removeRitual(enchantment);" },
       { "trigger": "addRitualtmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, remnantHelp, item, sacrifice, offerings...);" },
       { "trigger": "addRitualtmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, remnantHelp, item, sacrifice, offerings[], nbt);" },
       { "trigger": "addRitualtmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, remnantHelp, item, sacrifice, offerings[], nbt, tags...);" },
       { "trigger": "removeRitualtmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.removeRitual(item);" },
       { "trigger": "addChaptertmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addChapter(chapteridentifier, chaptertitle, necrodataidentifier);" },
       { "trigger": "removeChaptertmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.removeChapter(chapteridentifier, necrodataidentifier);" },
       { "trigger": "addNormalPagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addNormalPage(pageNum, pagetext, chapteridentifier, necrodataidentifier);" },
       { "trigger": "addItemPagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addItemPage(pageNum, stack, pagetext, chapteridentifier, necrodataidentifier);" },
       { "trigger": "addImagePagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addImagePage(pageNum, resourcepath, pagetext, chapteridentifier, necrodataidentifier);" },
       { "trigger": "addCraftingPagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addCraftingPage(pageNum, thing, pagetext, chapteridentifier, necrodataidentifier);" },
       { "trigger": "addCraftingPagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addCraftingPage(pageNum, thing, stuff[], pagetext, chapteridentifier, necrodataidentifier);" },
       { "trigger": "addURLPagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addURLPage(pageNum, url, pagetext, chapteridentifier, necrodataidentifier);" },
       { "trigger": "removePagetmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.removePage(pageNum, chapteridentifier, necrodataidentifier);" },
       { "trigger": "addRitualtmods.abyssalcraft.PotionAoERitual", "contents": "mods.abyssalcraft.PotionAoERitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[]);" },
       { "trigger": "addRitualtmods.abyssalcraft.PotionAoERitual", "contents": "mods.abyssalcraft.PotionAoERitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[], nbt);" },
       { "trigger": "removeRitualtmods.abyssalcraft.PotionAoERitual", "contents": "mods.abyssalcraft.PotionAoERitual.removeRitual(potion);" },
       { "trigger": "addRitualtmods.abyssalcraft.PotionRitual", "contents": "mods.abyssalcraft.PotionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[]);" },
       { "trigger": "addRitualtmods.abyssalcraft.PotionRitual", "contents": "mods.abyssalcraft.PotionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[], nbt);" },
       { "trigger": "removeRitualtmods.abyssalcraft.PotionRitual", "contents": "mods.abyssalcraft.PotionRitual.removeRitual(potion);" },
       { "trigger": "addShoggothFoodtmods.abyssalcraft.shoggoth", "contents": "mods.abyssalcraft.shoggoth.addShoggothFood(clazz);" },
       { "trigger": "addTransmutationtmods.abyssalcraft.Transmutator", "contents": "mods.abyssalcraft.Transmutator.addTransmutation(input, output, exp);" },
       { "trigger": "removeTransmutationtmods.abyssalcraft.Transmutator", "contents": "mods.abyssalcraft.Transmutator.removeTransmutation(input);" },
       { "trigger": "addUpgradetmods.abyssalcraft.UpgradeKit", "contents": "mods.abyssalcraft.UpgradeKit.addUpgrade(kit, input, output);" },
       { "trigger": "removeUpgradetmods.abyssalcraft.UpgradeKit", "contents": "mods.abyssalcraft.UpgradeKit.removeUpgrade(input);" },
       { "trigger": "addEntitytmods.armoreablemobs.ArmorGroup", "contents": "mods.armoreablemobs.ArmorGroup.addEntity(entity);" },
       { "trigger": "addArmortmods.armoreablemobs.ArmorGroup", "contents": "mods.armoreablemobs.ArmorGroup.addArmor(slot);" },
       { "trigger": "addGameStagetmods.armoreablemobs.ArmorGroup", "contents": "mods.armoreablemobs.ArmorGroup.addGameStage(stage);" },
       { "trigger": "removeAltarRecipetmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.removeAltarRecipe(output, altarLevel);" },
       { "trigger": "addDiscoveryAltarRecipetmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.addDiscoveryAltarRecipe(output, starlightRequired, craftingTickTime, inputs[]);" },
       { "trigger": "addAttunmentAltarRecipetmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.addAttunmentAltarRecipe(output, starlightRequired, craftingTickTime, inputs[]);" },
       { "trigger": "addConstellationAltarRecipetmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.addConstellationAltarRecipe(output, starlightRequired, craftingTickTime, inputs[]);" },
       { "trigger": "addInfusiontmods.astralsorcery.StarlightInfusion", "contents": "mods.astralsorcery.StarlightInfusion.addInfusion(input, output, consumeMultiple, consumptionChance, craftingTickTime);" },
       { "trigger": "removeInfusiontmods.astralsorcery.StarlightInfusion", "contents": "mods.astralsorcery.StarlightInfusion.removeInfusion(output);" },
       { "trigger": "addTransmutationtmods.astralsorcery.LightTransmutation", "contents": "mods.astralsorcery.LightTransmutation.addTransmutation(stackIn, stackOut, cost);" },
       { "trigger": "removeTransmutationtmods.astralsorcery.LightTransmutation", "contents": "mods.astralsorcery.LightTransmutation.removeTransmutation(stackToRemove, matchMeta);" },
       { "trigger": "addOretmods.astralsorcery.RitualMineralis", "contents": "mods.astralsorcery.RitualMineralis.addOre(oreDictOreName, weight);" },
       { "trigger": "removeOretmods.astralsorcery.RitualMineralis", "contents": "mods.astralsorcery.RitualMineralis.removeOre(oreDictOreName);" },
       { "trigger": "removeLiquefactiontmods.astralsorcery.Lightwell", "contents": "mods.astralsorcery.Lightwell.removeLiquefaction(input, output);" },
       { "trigger": "addLiquefactiontmods.astralsorcery.Lightwell", "contents": "mods.astralsorcery.Lightwell.addLiquefaction(input, output, productionMultiplier, shatterMultiplier, colorhex);" },
       { "trigger": "blacklisttmods.BadMobs", "contents": "mods.BadMobs.blacklist(dimId, entityId);" },
       { "trigger": "blacklisttmods.BadMobs", "contents": "mods.BadMobs.blacklist(entityId);" },
       { "trigger": "addFollowertmod.caravans.Caravan", "contents": "mod.caravans.Caravan.addFollower(caravan, merchant, optionalModelType);" },
       { "trigger": "registerCaravantmod.caravans.Caravan", "contents": "mod.caravans.Caravan.registerCaravan(name, optionalLeaderModel, optionalGamestage);" },
       { "trigger": "setEntityClassPathtmods.caravans.Entity", "contents": "mods.caravans.Entity.setEntityClassPath(clazz);" },
       { "trigger": "setCustomInfotmods.caravans.Entity", "contents": "mods.caravans.Entity.setCustomInfo(tag);" },
       { "trigger": "setUnlocalizedNametmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setUnlocalizedName(unlocalizedName);" },
       { "trigger": "setMaxStackSizetmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setMaxStackSize(maxStackSize);" },
       { "trigger": "setRaritytmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setRarity(rarity);" },
       { "trigger": "setCreativeTabtmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setCreativeTab(creativeTab);" },
       { "trigger": "setSmeltingExperiencetmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setSmeltingExperience(smeltingExperience);" },
       { "trigger": "setToolClasstmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setToolClass(toolClass);" },
       { "trigger": "setToolLeveltmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setToolLevel(toolLevel);" },
       { "trigger": "setBeaconPaymenttmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setBeaconPayment(beaconPayment);" },
       { "trigger": "setItemRightClicktmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setItemRightClick(itemRightClick);" },
       { "trigger": "setItemUseActiontmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setItemUseAction(itemUseAction);" },
       { "trigger": "setGlowingtmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setGlowing(glowing);" },
       { "trigger": "setOnItemUsetmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setOnItemUse(itemUse);" },
       { "trigger": "setMaxDamagetmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setMaxDamage(maxDamage);" },
       { "trigger": "registertmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.register();" },
       { "trigger": "setUnlocalizedNametmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setUnlocalizedName(unlocalizedName);" },
       { "trigger": "setCreativeTabtmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setCreativeTab(creativeTab);" },
       { "trigger": "setFullBlocktmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setFullBlock(fullBlock);" },
       { "trigger": "setLightOpacitytmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setLightOpacity(lightOpacity);" },
       { "trigger": "setTranslucenttmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setTranslucent(translucent);" },
       { "trigger": "setLightValuetmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setLightValue(lightValue);" },
       { "trigger": "setBlockHardnesstmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockHardness(blockHardness);" },
       { "trigger": "setBlockResistancetmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockResistance(blockResistance);" },
       { "trigger": "setToolClasstmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setToolClass(toolClass);" },
       { "trigger": "setToolLeveltmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setToolLevel(toolLevel);" },
       { "trigger": "setBlockSoundTypetmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockSoundType(blockSoundType);" },
       { "trigger": "setBlockMaterialtmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockMaterial(material);" },
       { "trigger": "setEnchantPowerBonustmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setEnchantPowerBonus(enchantPowerBonus);" },
       { "trigger": "setEnumBlockRenderTypetmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setEnumBlockRenderType(blockRenderType);" },
       { "trigger": "setSlipperinesstmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setSlipperiness(slipperiness);" },
       { "trigger": "setOnBlockBreaktmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnBlockBreak(iBlockAction);" },
       { "trigger": "setOnBlockPlacetmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnBlockPlace(iBlockAction);" },
       { "trigger": "setBlockLayertmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockLayer(blockLayer);" },
       { "trigger": "setAxisAlignedBBtmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setAxisAlignedBB(axisAlignedBB);" },
       { "trigger": "setOnUpdateTicktmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnUpdateTick(onUpdateTick);" },
       { "trigger": "setOnRandomTicktmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnRandomTick(onRandomTick);" },
       { "trigger": "setMobilityFlagtmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setMobilityFlag(mobilityFlag);" },
       { "trigger": "registertmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.register();" },
       { "trigger": "setUnlocalizedNametmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setUnlocalizedName(unlocalizedName);" },
       { "trigger": "setDensitytmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setDensity(density);" },
       { "trigger": "setGaseoustmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setGaseous(gaseous);" },
       { "trigger": "setLuminositytmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setLuminosity(luminosity);" },
       { "trigger": "setTemperaturetmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setTemperature(temperature);" },
       { "trigger": "setColortmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setColor(color);" },
       { "trigger": "setColorizetmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setColorize(colorize);" },
       { "trigger": "setStillLocationtmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setStillLocation(stillLocation);" },
       { "trigger": "setFlowingLocationtmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setFlowingLocation(flowingLocation);" },
       { "trigger": "setRaritytmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setRarity(rarity);" },
       { "trigger": "setViscositytmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setViscosity(viscosity);" },
       { "trigger": "setFillSoundtmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setFillSound(fillSound);" },
       { "trigger": "setEmptySoundtmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setEmptySound(emptySound);" },
       { "trigger": "setVaporizetmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setVaporize(vaporize);" },
       { "trigger": "setMaterialtmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setMaterial(material);" },
       { "trigger": "registertmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.register();" },
       { "trigger": "registertmods.contenttweaker.CreativeTab", "contents": "mods.contenttweaker.CreativeTab.register();" },
       { "trigger": "createParticletmods.contenttweaker.Particles", "contents": "mods.contenttweaker.Particles.createParticle(world, particleName);" },
       { "trigger": "doFireParticlestmods.contenttweaker.Particles", "contents": "mods.contenttweaker.Particles.doFireParticles(world);" },
       { "trigger": "doEnderChestParticlestmods.contenttweaker.Particles", "contents": "mods.contenttweaker.Particles.doEnderChestParticles(world);" },
       { "trigger": "calltmods.contenttweaker.Commands", "contents": "mods.contenttweaker.Commands.call(command, player, world);" },
       { "trigger": "setDatatmods.contenttweaker.PartType", "contents": "mods.contenttweaker.PartType.setData(data[]);" },
       { "trigger": "setTextureLocationtmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setTextureLocation(textureLocation);" },
       { "trigger": "setColorizedtmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setColorized(colorized);" },
       { "trigger": "addDataValuetmods.contenttweaker.MaterialPartData", "contents": "mods.contenttweaker.MaterialPartData.addDataValue(name, value);" },
       { "trigger": "setTextureLocationtmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setTextureLocation(textureLocation);" },
       { "trigger": "setColorizedtmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setColorized(colorized);" },
       { "trigger": "setCounttmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.setCount(count);" },
       { "trigger": "shrinktmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.shrink(count);" },
       { "trigger": "growtmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.grow(count);" },
       { "trigger": "damagetmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.damage(amount, player);" },
       { "trigger": "setMinXtmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMinX(minX);" },
       { "trigger": "setMinYtmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMinY(minY);" },
       { "trigger": "setMinZtmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMinZ(minZ);" },
       { "trigger": "setMaxXtmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMaxX(maxX);" },
       { "trigger": "setMaxYtmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMaxY(maxY);" },
       { "trigger": "setMaxZtmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMaxZ(maxZ);" },
       { "trigger": "addRecipetmods.crossroads.FluidCoolingChamber", "contents": "mods.crossroads.FluidCoolingChamber.addRecipe(output, input, maxTemp, heatAdded);" },
       { "trigger": "removeRecipetmods.crossroads.FluidCoolingChamber", "contents": "mods.crossroads.FluidCoolingChamber.removeRecipe(input);" },
       { "trigger": "addRecipetmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.addRecipe(input, output1, optionalOutput2, optionalOutput3);" },
       { "trigger": "addRecipetmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.addRecipe(input, output1, optionalOutput2, optionalOutput3);" },
       { "trigger": "removeRecipetmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.removeRecipe(input);" },
       { "trigger": "removeRecipetmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.removeRecipe(input);" },
       { "trigger": "addDimensionStagetmods.DimensionStages", "contents": "mods.DimensionStages.addDimensionStage(stage, id);" },
       { "trigger": "addRecipetmods.extendedcrafting.CombinationCrafting", "contents": "mods.extendedcrafting.CombinationCrafting.addRecipe(output, cost, input, ingredients[]);" },
       { "trigger": "addRecipetmods.extendedcrafting.CombinationCrafting", "contents": "mods.extendedcrafting.CombinationCrafting.addRecipe(output, cost, perTick, input, ingredients[]);" },
       { "trigger": "removetmods.extendedcrafting.CombinationCrafting", "contents": "mods.extendedcrafting.CombinationCrafting.remove(target);" },
       { "trigger": "addRecipetmods.extendedcrafting.CompressionCrafting", "contents": "mods.extendedcrafting.CompressionCrafting.addRecipe(output, input, inputCount, catalyst, powerCost);" },
       { "trigger": "addRecipetmods.extendedcrafting.CompressionCrafting", "contents": "mods.extendedcrafting.CompressionCrafting.addRecipe(output, input, inputCount, catalyst, powerCost, powerRate);" },
       { "trigger": "removetmods.extendedcrafting.CompressionCrafting", "contents": "mods.extendedcrafting.CompressionCrafting.remove(target);" },
       { "trigger": "addShapedtmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShaped(output, ingredients[][]);" },
       { "trigger": "addShapedtmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShaped(tier, output, ingredients[][]);" },
       { "trigger": "addShapelesstmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShapeless(output, ingredients[]);" },
       { "trigger": "addShapelesstmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShapeless(tier, output, ingredients[]);" },
       { "trigger": "removetmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.remove(target);" },
       { "trigger": "addRecipetmods.gregtech.AlloySmelter", "contents": "mods.gregtech.AlloySmelter.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Amplifabricator", "contents": "mods.gregtech.Amplifabricator.addRecipe(input, duration, amount);" },
       { "trigger": "addRecipetmods.gregtech.ArcFurnace", "contents": "mods.gregtech.ArcFurnace.addRecipe(outputs[], input, fluidInput, outChances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Assembler", "contents": "mods.gregtech.Assembler.addRecipe(output, input1, input2, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Assembler", "contents": "mods.gregtech.Assembler.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Assembler", "contents": "mods.gregtech.Assembler.addRecipe(output, inputs[], fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.AssemblyLine", "contents": "mods.gregtech.AssemblyLine.addRecipe(aResearchItem, aResearchTime, aInputs[], aFluidInputs[], aOutput, aDuration, aEUt);" },
       { "trigger": "addRecipetmods.gregtech.Autoclave", "contents": "mods.gregtech.Autoclave.addRecipe(output, input, fluidInput, chances, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.BlastFurnace", "contents": "mods.gregtech.BlastFurnace.addRecipe(output[], fluidInput, input[], durationTicks, euPerTick, heat);" },
       { "trigger": "addRecipetmods.gregtech.BlastFurnace", "contents": "mods.gregtech.BlastFurnace.addRecipe(output[], input[], durationTicks, euPerTick, heat);" },
       { "trigger": "addRecipetmods.gregtech.Brewery", "contents": "mods.gregtech.Brewery.addRecipe(output, ingredient, input, hidden);" },
       { "trigger": "addRecipetmods.gregtech.Canner", "contents": "mods.gregtech.Canner.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Canner", "contents": "mods.gregtech.Canner.addRecipe(output[], input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Centrifuge", "contents": "mods.gregtech.Centrifuge.addRecipe(outputs[], fluidOutput, input1, input2, fluidInput, chances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipeFuelCantmods.gregtech.Centrifuge", "contents": "mods.gregtech.Centrifuge.addRecipeFuelCan(outputs[], input, numCans, duration);" },
       { "trigger": "addRecipetmods.gregtech.Centrifuge", "contents": "mods.gregtech.Centrifuge.addRecipe(outputs[], input, cells, durationTicks);" },
       { "trigger": "addRecipetmods.gregtech.ChemicalBath", "contents": "mods.gregtech.ChemicalBath.addRecipe(output[], input, fluidInput, chances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.ChemicalReactor", "contents": "mods.gregtech.ChemicalReactor.addRecipe(output, fluidOutput, input1, input2, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.ChemicalReactor", "contents": "mods.gregtech.ChemicalReactor.addRecipe(output, fluidOutput, input1, input2, fluidInput, durationTicks);" },
       { "trigger": "addRecipetmods.gregtech.ChemicalReactor", "contents": "mods.gregtech.ChemicalReactor.addRecipe(output, input1, input2, durationTicks);" },
       { "trigger": "addRecipetmods.gregtech.CuttingSaw", "contents": "mods.gregtech.CuttingSaw.addRecipe(output1, output2, input, lubricant, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.CuttingSaw", "contents": "mods.gregtech.CuttingSaw.addRecipe(output[], input, lubricant, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.DistillationTower", "contents": "mods.gregtech.DistillationTower.addRecipe(fluidOutput[], itemOutput, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Distillery", "contents": "mods.gregtech.Distillery.addRecipe(fluidOutput, circuit, fluidInput, durationTicks, euPerTick, hidden);" },
       { "trigger": "addRecipetmods.gregtech.Electrolyzer", "contents": "mods.gregtech.Electrolyzer.addRecipe(outputs[], fluidOutput, input, cells, fluidInput, chances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Electrolyzer", "contents": "mods.gregtech.Electrolyzer.addRecipe(outputs[], input, cells, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Extruder", "contents": "mods.gregtech.Extruder.addRecipe(output, input, shape, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Fermenter", "contents": "mods.gregtech.Fermenter.addRecipe(fluidOutput, fluidInput, duration, hidden);" },
       { "trigger": "addRecipetmods.gregtech.FluidCanner", "contents": "mods.gregtech.FluidCanner.addRecipe(output, input, fluidOutput, fluidInput);" },
       { "trigger": "addRecipetmods.gregtech.FluidExtractor", "contents": "mods.gregtech.FluidExtractor.addRecipe(output, input, fluidOutput, durationTicks, euPerTick, chance);" },
       { "trigger": "addRecipetmods.gregtech.FluidHeater", "contents": "mods.gregtech.FluidHeater.addRecipe(fluidOutput, circuit, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.FluidSolidifier", "contents": "mods.gregtech.FluidSolidifier.addRecipe(output, mold, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.ForgeHammer", "contents": "mods.gregtech.ForgeHammer.addRecipe(output, input, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.FormingPress", "contents": "mods.gregtech.FormingPress.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.FusionReactor", "contents": "mods.gregtech.FusionReactor.addRecipe(fluidOutput, fluidInput1, fluidInput2, durationTicks, euPerTick, startEU);" },
       { "trigger": "addRecipetmods.gregtech.ImplosionCompressor", "contents": "mods.gregtech.ImplosionCompressor.addRecipe(output, input, tnt);" },
       { "trigger": "addRecipetmods.gregtech.ImplosionCompressor", "contents": "mods.gregtech.ImplosionCompressor.addRecipe(output[], input, tnt);" },
       { "trigger": "addRecipetmods.gregtech.Lathe", "contents": "mods.gregtech.Lathe.addRecipe(output, input, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Lathe", "contents": "mods.gregtech.Lathe.addRecipe(outputs[], input, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Mixer", "contents": "mods.gregtech.Mixer.addRecipe(output, fluidOutput, input[], fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Mixer", "contents": "mods.gregtech.Mixer.addRecipe(output, input[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.OilCracker", "contents": "mods.gregtech.OilCracker.addRecipe(fluidOutput, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Packer", "contents": "mods.gregtech.Packer.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.PlasmaArcFurnace", "contents": "mods.gregtech.PlasmaArcFurnace.addRecipe(outputs[], fluidOutput, input, fluidInput, outChances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.PlasmaArcFurnace", "contents": "mods.gregtech.PlasmaArcFurnace.addRecipe(outputs[], fluidOutput, input, outChances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.PlateBender", "contents": "mods.gregtech.PlateBender.addRecipe(output, input, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Polarizer", "contents": "mods.gregtech.Polarizer.addRecipe(output, input, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.PrecisionLaser", "contents": "mods.gregtech.PrecisionLaser.addRecipe(output, input1, input2, durationTicks, euPerTick, cleanroom);" },
       { "trigger": "addRecipetmods.gregtech.PrecisionLaser", "contents": "mods.gregtech.PrecisionLaser.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Printer", "contents": "mods.gregtech.Printer.addRecipe(output, input, dataStick, ink, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Pulverizer", "contents": "mods.gregtech.Pulverizer.addRecipe(outputs[], input, outChances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.PyrolyseOven", "contents": "mods.gregtech.PyrolyseOven.addRecipe(output, fluidOutput, circuit, input, fluidInput, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Separator", "contents": "mods.gregtech.Separator.addRecipe(output[], input, outChances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Sifter", "contents": "mods.gregtech.Sifter.addRecipe(outputs[], input, outChances[], durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Slicer", "contents": "mods.gregtech.Slicer.addRecipe(output, input, blade, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.Unpacker", "contents": "mods.gregtech.Unpacker.addRecipe(output1, output2, input, durationTicks, euPerTick);" },
       { "trigger": "addRecipetmods.gregtech.VacuumFreezer", "contents": "mods.gregtech.VacuumFreezer.addRecipe(output, input, durationTicks);" },
       { "trigger": "addRecipetmods.gregtech.Wiremill", "contents": "mods.gregtech.Wiremill.addRecipe(output, input, durationTicks, euPerTick);" },
       { "trigger": "addDieselFueltmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addDieselFuel(output, input, euPerMillibucket);" },
       { "trigger": "addGasTurbineFueltmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addGasTurbineFuel(output, input, euPerMillibucket);" },
       { "trigger": "addThermalGeneratorFueltmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addThermalGeneratorFuel(output, input, euPerMillibucket);" },
       { "trigger": "addDenseFluidFueltmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addDenseFluidFuel(output, input, euPerMillibucket);" },
       { "trigger": "addPlasmaGeneratorFueltmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addPlasmaGeneratorFuel(output, input, euPerMillibucket);" },
       { "trigger": "addMagicGeneratorFueltmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addMagicGeneratorFuel(output, input, euPerMillibucket);" },
       { "trigger": "addtmods.horsepower.ChoppingBlock", "contents": "mods.horsepower.ChoppingBlock.add(input, output, time, optionalHand);" },
       { "trigger": "removetmods.horsepower.ChoppingBlock", "contents": "mods.horsepower.ChoppingBlock.remove(output, optionalHand);" },
       { "trigger": "addtmods.horsepower.Grindstone", "contents": "mods.horsepower.Grindstone.add(input, output, time, optionalHand, optionalSecondary, optionalSecondaryChance);" },
       { "trigger": "removetmods.horsepower.Grindstone", "contents": "mods.horsepower.Grindstone.remove(output, optionalHand);" },
       { "trigger": "addtmods.horsepower.Press", "contents": "mods.horsepower.Press.add(input, output);" },
       { "trigger": "removetmods.horsepower.Press", "contents": "mods.horsepower.Press.remove(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.AlloySmelter", "contents": "mods.immersiveengineering.AlloySmelter.addRecipe(output, first, second, time);" },
       { "trigger": "removeRecipetmods.immersiveengineering.AlloySmelter", "contents": "mods.immersiveengineering.AlloySmelter.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.ArcFurnace", "contents": "mods.immersiveengineering.ArcFurnace.addRecipe(output, input, slag, time, energyPerTick, optionalAdditives[], optionalSpecialRecipeType);" },
       { "trigger": "removeRecipetmods.immersiveengineering.ArcFurnace", "contents": "mods.immersiveengineering.ArcFurnace.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.addRecipe(output, input, time, optionalSlag);" },
       { "trigger": "removeRecipetmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.removeRecipe(output);" },
       { "trigger": "addFueltmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.addFuel(input, time);" },
       { "trigger": "removeFueltmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.removeFuel(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.Blueprint", "contents": "mods.immersiveengineering.Blueprint.addRecipe(category, output, inputs[]);" },
       { "trigger": "removeRecipetmods.immersiveengineering.Blueprint", "contents": "mods.immersiveengineering.Blueprint.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.BottlingMachine", "contents": "mods.immersiveengineering.BottlingMachine.addRecipe(output, input, fluid);" },
       { "trigger": "removeRecipetmods.immersiveengineering.BottlingMachine", "contents": "mods.immersiveengineering.BottlingMachine.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.CokeOven", "contents": "mods.immersiveengineering.CokeOven.addRecipe(output, fuelOutput, input, time);" },
       { "trigger": "removeRecipetmods.immersiveengineering.CokeOven", "contents": "mods.immersiveengineering.CokeOven.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.Crusher", "contents": "mods.immersiveengineering.Crusher.addRecipe(output, input, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
       { "trigger": "removeRecipetmods.immersiveengineering.Crusher", "contents": "mods.immersiveengineering.Crusher.removeRecipe(output);" },
       { "trigger": "addFueltmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.addFuel(fuel, time);" },
       { "trigger": "addDrillFueltmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.addDrillFuel(fuel);" },
       { "trigger": "removeFueltmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.removeFuel(fuel);" },
       { "trigger": "removeDrillFueltmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.removeDrillFuel(fuel);" },
       { "trigger": "addMineraltmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.addMineral(name, mineralWeight, failChance, ores[], chances[], optionalDimensionWhitelist[], optionalBlacklist);" },
       { "trigger": "removeMineraltmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.removeMineral(name);" },
       { "trigger": "addOretmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.addOre(ore, chance);" },
       { "trigger": "removeOretmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.removeOre(ore);" },
       { "trigger": "addRecipetmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.addRecipe(output, fluid, input, energy);" },
       { "trigger": "removeFluidRecipetmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.removeFluidRecipe(fluid);" },
       { "trigger": "removeItemRecipetmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.removeItemRecipe(stack);" },
       { "trigger": "removeByInputtmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.removeByInput(stack);" },
       { "trigger": "addRecipetmods.immersiveengineering.MetalPress", "contents": "mods.immersiveengineering.MetalPress.addRecipe(output, input, mold, energy, optionalInputSize);" },
       { "trigger": "removeRecipetmods.immersiveengineering.MetalPress", "contents": "mods.immersiveengineering.MetalPress.removeRecipe(output);" },
       { "trigger": "removeRecipeByMoldtmods.immersiveengineering.MetalPress", "contents": "mods.immersiveengineering.MetalPress.removeRecipeByMold(mold);" },
       { "trigger": "addRecipetmods.immersiveengineering.Mixer", "contents": "mods.immersiveengineering.Mixer.addRecipe(output, fluidInput, itemInputs[], energy);" },
       { "trigger": "removeRecipetmods.immersiveengineering.Mixer", "contents": "mods.immersiveengineering.Mixer.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.Refinery", "contents": "mods.immersiveengineering.Refinery.addRecipe(output, input0, input1, energy);" },
       { "trigger": "removeRecipetmods.immersiveengineering.Refinery", "contents": "mods.immersiveengineering.Refinery.removeRecipe(output);" },
       { "trigger": "addRecipetmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.addRecipe(output, fluid, input, energy);" },
       { "trigger": "removeFluidRecipetmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.removeFluidRecipe(fluid);" },
       { "trigger": "removeItemRecipetmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.removeItemRecipe(stack);" },
       { "trigger": "removeByInputtmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.removeByInput(stack);" },
       { "trigger": "addtmods.industrialforegoing.BioReactor", "contents": "mods.industrialforegoing.BioReactor.add(input);" },
       { "trigger": "removetmods.industrialforegoing.BioReactor", "contents": "mods.industrialforegoing.BioReactor.remove(input);" },
       { "trigger": "addtmods.industrialforegoing.LaserDrill", "contents": "mods.industrialforegoing.LaserDrill.add(meta, output, weight);" },
       { "trigger": "removetmods.industrialforegoing.LaserDrill", "contents": "mods.industrialforegoing.LaserDrill.remove(input);" },
       { "trigger": "addtmods.industrialforegoing.SludgeRefiner", "contents": "mods.industrialforegoing.SludgeRefiner.add(output, weight);" },
       { "trigger": "removetmods.industrialforegoing.SludgeRefiner", "contents": "mods.industrialforegoing.SludgeRefiner.remove(output);" },
       { "trigger": "addStartingItemtmods.initialinventory.InvHandler", "contents": "mods.initialinventory.InvHandler.addStartingItem(item);" },
       { "trigger": "addStartingItemtmods.initialinventory.InvHandler", "contents": "mods.initialinventory.InvHandler.addStartingItem(item, slotID);" },
       { "trigger": "addItemStagetmods.ItemStages", "contents": "mods.ItemStages.addItemStage(stage, input);" },
       { "trigger": "removeTabletmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeTable(table);" },
       { "trigger": "removePooltmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removePool(table, pool);" },
       { "trigger": "removeEntrytmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeEntry(table, pool, entry);" },
       { "trigger": "removeItemtmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeItem(table, pool, item);" },
       { "trigger": "removeModEntrytmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeModEntry(modid);" },
       { "trigger": "removeModItemtmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeModItem(modid);" },
       { "trigger": "removeModTabletmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeModTable(modid);" },
       { "trigger": "removeGlobalItemtmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeGlobalItem(itemId);" },
       { "trigger": "addRecipetmods.mekanism.chemical.crystallizer", "contents": "mods.mekanism.chemical.crystallizer.addRecipe(gasInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.chemical.crystallizer", "contents": "mods.mekanism.chemical.crystallizer.removeRecipe(itemOutput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.chemical.dissolution", "contents": "mods.mekanism.chemical.dissolution.addRecipe(itemInput, gasOutput);" },
       { "trigger": "removeRecipetmods.mekanism.chemical.dissolution", "contents": "mods.mekanism.chemical.dissolution.removeRecipe(gasOutput, optionalItemInput);" },
       { "trigger": "addRecipetmods.mekanism.chemical.infuser", "contents": "mods.mekanism.chemical.infuser.addRecipe(leftGasInput, rightGasInput, gasOutput);" },
       { "trigger": "removeRecipetmods.mekanism.chemical.infuser", "contents": "mods.mekanism.chemical.infuser.removeRecipe(gasOutput, optionalLeftGasInput, optionalRightGasInput);" },
       { "trigger": "addRecipetmods.mekanism.chemical.injection", "contents": "mods.mekanism.chemical.injection.addRecipe(itemInput, gasInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.chemical.injection", "contents": "mods.mekanism.chemical.injection.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.chemical.oxidizer", "contents": "mods.mekanism.chemical.oxidizer.addRecipe(itemInput, gasOutput);" },
       { "trigger": "removeRecipetmods.mekanism.chemical.oxidizer", "contents": "mods.mekanism.chemical.oxidizer.removeRecipe(gasOutput, optionalItemInput);" },
       { "trigger": "addRecipetmods.mekanism.chemical.washer", "contents": "mods.mekanism.chemical.washer.addRecipe(gasInput, gasOutput);" },
       { "trigger": "removeRecipetmods.mekanism.chemical.washer", "contents": "mods.mekanism.chemical.washer.removeRecipe(gasOutput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.combiner", "contents": "mods.mekanism.combiner.addRecipe(itemInput, gasInput, itemOutput);" },
       { "trigger": "addRecipetmods.mekanism.combiner", "contents": "mods.mekanism.combiner.addRecipe(itemInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.combiner", "contents": "mods.mekanism.combiner.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.compressor", "contents": "mods.mekanism.compressor.addRecipe(itemInput, itemOutput);" },
       { "trigger": "addRecipetmods.mekanism.compressor", "contents": "mods.mekanism.compressor.addRecipe(itemInput, gasInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.compressor", "contents": "mods.mekanism.compressor.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.crusher", "contents": "mods.mekanism.crusher.addRecipe(itemInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.crusher", "contents": "mods.mekanism.crusher.removeRecipe(itemOutput, optionalItemInput);" },
       { "trigger": "addRecipetmods.mekanism.smelter", "contents": "mods.mekanism.smelter.addRecipe(itemInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.smelter", "contents": "mods.mekanism.smelter.removeRecipe(itemInput, optionalItemOutput);" },
       { "trigger": "addRecipetmods.mekanism.enrichment", "contents": "mods.mekanism.enrichment.addRecipe(itemInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.enrichment", "contents": "mods.mekanism.enrichment.removeRecipe(itemInput, optionalItemOutput);" },
       { "trigger": "addRecipetmods.mekanism.infuser", "contents": "mods.mekanism.infuser.addRecipe(infuseType, infuseAmount, itemInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.infuser", "contents": "mods.mekanism.infuser.removeRecipe(itemOutput, optionalItemInput, optionalInfuseType);" },
       { "trigger": "addRecipetmods.mekanism.purification", "contents": "mods.mekanism.purification.addRecipe(itemInput, itemOutput);" },
       { "trigger": "addRecipetmods.mekanism.purification", "contents": "mods.mekanism.purification.addRecipe(itemInput, gasInput, itemOutput);" },
       { "trigger": "removeRecipetmods.mekanism.purification", "contents": "mods.mekanism.purification.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.reaction", "contents": "mods.mekanism.reaction.addRecipe(itemInput, liquidInput, gasInput, itemOutput, gasOutput, energy, duration);" },
       { "trigger": "removeRecipetmods.mekanism.reaction", "contents": "mods.mekanism.reaction.removeRecipe(itemOutput, gasOutput, optionalItemInput, optionalLiquidInput, optionalGasInput);" },
       { "trigger": "addRecipetmods.mekanism.sawmill", "contents": "mods.mekanism.sawmill.addRecipe(itemInput, itemOutput, optionalOptionalItemOutput, optionalOptionalChance);" },
       { "trigger": "removeRecipetmods.mekanism.sawmill", "contents": "mods.mekanism.sawmill.removeRecipe(itemInput, optionalItemOutput, optionalOptionalItemOutput);" },
       { "trigger": "addRecipetmods.mekanism.separator", "contents": "mods.mekanism.separator.addRecipe(liquidInput, energy, leftGasOutput, rightGasOutput);" },
       { "trigger": "removeRecipetmods.mekanism.separator", "contents": "mods.mekanism.separator.removeRecipe(liquidInput, optionalLeftGasInput, optionalRightGasInput);" },
       { "trigger": "addRecipetmods.mekanism.solarneutronactivator", "contents": "mods.mekanism.solarneutronactivator.addRecipe(gasInput, gasOutput);" },
       { "trigger": "removeRecipetmods.mekanism.solarneutronactivator", "contents": "mods.mekanism.solarneutronactivator.removeRecipe(gasInput, optionalGasOutput);" },
       { "trigger": "addRecipetmods.mekanism.thermalevaporation", "contents": "mods.mekanism.thermalevaporation.addRecipe(liquidInput, liquidOutput);" },
       { "trigger": "removeRecipetmods.mekanism.thermalevaporation", "contents": "mods.mekanism.thermalevaporation.removeRecipe(liquidInput, optionalLiquidOutput);" },
       { "trigger": "removetfurnace", "contents": "furnace.remove(output, optionalInput);" },
       { "trigger": "addRecipetfurnace", "contents": "furnace.addRecipe(output, input, optionalXp);" },
       { "trigger": "setFueltfurnace", "contents": "furnace.setFuel(item, fuel);" },
       { "trigger": "addShapedtrecipes", "contents": "recipes.addShaped(output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapedMirroredtrecipes", "contents": "recipes.addShapedMirrored(output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapelesstrecipes", "contents": "recipes.addShapeless(output, ingredients[], optionalFunction, optionalAction);" },
       { "trigger": "addStagetmods.MobStages", "contents": "mods.MobStages.addStage(stage, entityId);" },
       { "trigger": "addStagetmods.MobStages", "contents": "mods.MobStages.addStage(stage, entityId, dimension);" },
       { "trigger": "addReplacementtmods.MobStages", "contents": "mods.MobStages.addReplacement(entityId, replacementId);" },
       { "trigger": "addReplacementtmods.MobStages", "contents": "mods.MobStages.addReplacement(entityId, replacementId, dimension);" },
       { "trigger": "addRangetmods.MobStages", "contents": "mods.MobStages.addRange(entityId, range);" },
       { "trigger": "addReplacementtmods.MobStages", "contents": "mods.MobStages.addReplacement(entityId, range, dimension);" },
       { "trigger": "toggleSpawnertmods.MobStages", "contents": "mods.MobStages.toggleSpawner(entityId, allow);" },
       { "trigger": "toggleSpawnertmods.MobStages", "contents": "mods.MobStages.toggleSpawner(entityId, allow, dimension);" },
       { "trigger": "addRecipetmods.actuallyadditions.AtomicReconstructor", "contents": "mods.actuallyadditions.AtomicReconstructor.addRecipe(output, input, energyUsed);" },
       { "trigger": "removeRecipetmods.actuallyadditions.AtomicReconstructor", "contents": "mods.actuallyadditions.AtomicReconstructor.removeRecipe(output);" },
       { "trigger": "addReturntmods.actuallyadditions.BallOfFur", "contents": "mods.actuallyadditions.BallOfFur.addReturn(output, chance);" },
       { "trigger": "removeReturntmods.actuallyadditions.BallOfFur", "contents": "mods.actuallyadditions.BallOfFur.removeReturn(output);" },
       { "trigger": "addRecipetmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.addRecipe(output, outputDisplay, input, inputDisplay);" },
       { "trigger": "removeRecipetmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.removeRecipe(output);" },
       { "trigger": "addRecipetmods.actuallyadditions.Crusher", "contents": "mods.actuallyadditions.Crusher.addRecipe(output, input, optionalOutputSecondary, optionalOutputSecondaryChance);" },
       { "trigger": "removeRecipetmods.actuallyadditions.Crusher", "contents": "mods.actuallyadditions.Crusher.removeRecipe(output);" },
       { "trigger": "addRecipetmods.actuallyadditions.Empowerer", "contents": "mods.actuallyadditions.Empowerer.addRecipe(output, input, modifier1, modifier2, modifier3, modifier4, energyPerStand, time, optionalParticleColourArray[]);" },
       { "trigger": "removeRecipetmods.actuallyadditions.Empowerer", "contents": "mods.actuallyadditions.Empowerer.removeRecipe(output);" },
       { "trigger": "addStoneOretmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.addStoneOre(ore, weight);" },
       { "trigger": "addNetherOretmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.addNetherOre(ore, weight);" },
       { "trigger": "removeStoneOretmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.removeStoneOre(ore);" },
       { "trigger": "removeNetherOretmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.removeNetherOre(ore);" },
       { "trigger": "addRecipetmods.actuallyadditions.OilGen", "contents": "mods.actuallyadditions.OilGen.addRecipe(fluid, genAmount, optionalGenTime);" },
       { "trigger": "removeRecipetmods.actuallyadditions.OilGen", "contents": "mods.actuallyadditions.OilGen.removeRecipe(output);" },
       { "trigger": "addLoottmods.actuallyadditions.TreasureChest", "contents": "mods.actuallyadditions.TreasureChest.addLoot(returnItem, chance, minAmount, maxAmount);" },
       { "trigger": "removeLoottmods.actuallyadditions.TreasureChest", "contents": "mods.actuallyadditions.TreasureChest.removeLoot(returnItem);" },
       { "trigger": "addShapedtmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.addShaped(output, inputs[][]);" },
       { "trigger": "addShapelesstmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.addShapeless(output, inputs[]);" },
       { "trigger": "removeShapedtmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.removeShaped(output, optionalIngredients[][]);" },
       { "trigger": "removeShapelesstmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.removeShapeless(output, optionalIngredients[]);" },
       { "trigger": "settmods.betterwithmods.Buoyancy", "contents": "mods.betterwithmods.Buoyancy.set(stack, value);" },
       { "trigger": "addtmods.betterwithmods.Cauldron", "contents": "mods.betterwithmods.Cauldron.add(output, optionalSecondaryOutput, inputs[]);" },
       { "trigger": "removetmods.betterwithmods.Cauldron", "contents": "mods.betterwithmods.Cauldron.remove(output);" },
       { "trigger": "removetmods.betterwithmods.Cauldron", "contents": "mods.betterwithmods.Cauldron.remove(output, optionalSecondary, inputs[]);" },
       { "trigger": "addtmods.betterwithmods.Crucible", "contents": "mods.betterwithmods.Crucible.add(output, optionalSecondaryOutput, inputs[]);" },
       { "trigger": "removetmods.betterwithmods.Crucible", "contents": "mods.betterwithmods.Crucible.remove(output);" },
       { "trigger": "removetmods.betterwithmods.Crucible", "contents": "mods.betterwithmods.Crucible.remove(output, secondary, inputs[]);" },
       { "trigger": "addtmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.add(output[], input);" },
       { "trigger": "addtmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.add(output[], input);" },
       { "trigger": "removetmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.remove(input);" },
       { "trigger": "registerBlocktmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.registerBlock(block);" },
       { "trigger": "addtmods.betterwithmods.Mill", "contents": "mods.betterwithmods.Mill.add(output, optionalSecondaryOutput, inputs[]);" },
       { "trigger": "removetmods.betterwithmods.Mill", "contents": "mods.betterwithmods.Mill.remove(output);" },
       { "trigger": "removetmods.betterwithmods.Mill", "contents": "mods.betterwithmods.Mill.remove(output, inputs[]);" },
       { "trigger": "settmods.betterwithmods.Movement", "contents": "mods.betterwithmods.Movement.set(input, speed);" },
       { "trigger": "addtmods.betterwithmods.Saw", "contents": "mods.betterwithmods.Saw.add(output[], input);" },
       { "trigger": "removetmods.betterwithmods.Saw", "contents": "mods.betterwithmods.Saw.remove(input);" },
       { "trigger": "addtmods.betterwithmods.StokedCauldron", "contents": "mods.betterwithmods.StokedCauldron.add(output, optionalSecondaryOutput, inputs[]);" },
       { "trigger": "removetmods.betterwithmods.StokedCauldron", "contents": "mods.betterwithmods.StokedCauldron.remove(output);" },
       { "trigger": "removetmods.betterwithmods.StokedCauldron", "contents": "mods.betterwithmods.StokedCauldron.remove(output, inputs[]);" },
       { "trigger": "addtmods.betterwithmods.StokedCrucible", "contents": "mods.betterwithmods.StokedCrucible.add(output, optionalSecondaryOutput, inputs[]);" },
       { "trigger": "removetmods.betterwithmods.StokedCrucible", "contents": "mods.betterwithmods.StokedCrucible.remove(output, optionalSecondary);" },
       { "trigger": "removetmods.betterwithmods.StokedCrucible", "contents": "mods.betterwithmods.StokedCrucible.remove(output, optionalSecondary, inputs[]);" },
       { "trigger": "addtmods.betterwithmods.Turntable", "contents": "mods.betterwithmods.Turntable.add(inputBlock, outputBlock, additionalOutput[]);" },
       { "trigger": "removetmods.betterwithmods.Turntable", "contents": "mods.betterwithmods.Turntable.remove(inputBlock);" },
       { "trigger": "addtmods.extrautils2.Crusher", "contents": "mods.extrautils2.Crusher.add(output, input, optionalSecondaryOutput, optionalSecondaryChance);" },
       { "trigger": "removetmods.extrautils2.Crusher", "contents": "mods.extrautils2.Crusher.remove(input);" },
       { "trigger": "addtmods.extrautils2.Resonator", "contents": "mods.extrautils2.Resonator.add(output, input, energy, optionalAddOwnerTag);" },
       { "trigger": "removetmods.extrautils2.Resonator", "contents": "mods.extrautils2.Resonator.remove(output);" },
       { "trigger": "addRecipetmods.forestry.Carpenter", "contents": "mods.forestry.Carpenter.addRecipe(output, ingredients[][], packagingTime, optionalFluidInput, optionalBox);" },
       { "trigger": "removeRecipetmods.forestry.Carpenter", "contents": "mods.forestry.Carpenter.removeRecipe(output, optionalFluidInput);" },
       { "trigger": "addRecipetmods.forestry.Centrifuge", "contents": "mods.forestry.Centrifuge.addRecipe(output[], ingredients, packagingTime);" },
       { "trigger": "removeRecipetmods.forestry.Centrifuge", "contents": "mods.forestry.Centrifuge.removeRecipe(input);" },
       { "trigger": "addRecipetmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.addRecipe(fluidOutput, resource, fluidInput, fermentationValue, fluidOutputModifier);" },
       { "trigger": "removeRecipetmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.removeRecipe(input);" },
       { "trigger": "addFueltmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.addFuel(item, fermentPerCycle, burnDuration);" },
       { "trigger": "removeFueltmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.removeFuel(fermenterItem);" },
       { "trigger": "addRecipetmods.forestry.Moistener", "contents": "mods.forestry.Moistener.addRecipe(output, input, packagingTime);" },
       { "trigger": "removeRecipetmods.forestry.Moistener", "contents": "mods.forestry.Moistener.removeRecipe(output);" },
       { "trigger": "addFueltmods.forestry.Moistener", "contents": "mods.forestry.Moistener.addFuel(item, product, moistenerValue, stage);" },
       { "trigger": "removeFueltmods.forestry.Moistener", "contents": "mods.forestry.Moistener.removeFuel(moistenerItem);" },
       { "trigger": "addRecipetmods.forestry.Squeezer", "contents": "mods.forestry.Squeezer.addRecipe(fluidOutput, ingredients[], timePerItem, optionalItemOutput);" },
       { "trigger": "removeRecipetmods.forestry.Squeezer", "contents": "mods.forestry.Squeezer.removeRecipe(liquid, optionalIngredients[]);" },
       { "trigger": "addRecipetmods.forestry.Still", "contents": "mods.forestry.Still.addRecipe(fluidOutput, fluidInput, timePerUnit);" },
       { "trigger": "removeRecipetmods.forestry.Still", "contents": "mods.forestry.Still.removeRecipe(output, optionalFluidInput);" },
       { "trigger": "addSmeltingtmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.addSmelting(liquidStack, itemInput, meltingPoint);" },
       { "trigger": "addCasttmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.addCast(output, ingredients[][], liquidStack, optionalPlan);" },
       { "trigger": "removeSmeltingtmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.removeSmelting(itemInput);" },
       { "trigger": "removeCasttmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.removeCast(product);" },
       { "trigger": "addRecipetmods.tconstruct.Alloy", "contents": "mods.tconstruct.Alloy.addRecipe(output, inputs[]);" },
       { "trigger": "removeRecipetmods.tconstruct.Alloy", "contents": "mods.tconstruct.Alloy.removeRecipe(output, optionalInput[]);" },
       { "trigger": "addTableRecipetmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.addTableRecipe(output, cast, fluid, amount, optionalConsumeCast);" },
       { "trigger": "addBasinRecipetmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.addBasinRecipe(output, cast, fluid, amount, optionalConsumeCast);" },
       { "trigger": "removeTableRecipetmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.removeTableRecipe(output, optionalInput);" },
       { "trigger": "removeBasinRecipetmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.removeBasinRecipe(output, optionalInput);" },
       { "trigger": "addRecipetmods.tconstruct.Drying", "contents": "mods.tconstruct.Drying.addRecipe(output, input, time);" },
       { "trigger": "removeRecipetmods.tconstruct.Drying", "contents": "mods.tconstruct.Drying.removeRecipe(output, optionalInput);" },
       { "trigger": "registerFueltmods.tconstruct.Fuel", "contents": "mods.tconstruct.Fuel.registerFuel(fluid, duration);" },
       { "trigger": "addRecipetmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.addRecipe(output, input, optionalTemp);" },
       { "trigger": "addEntityMeltingtmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.addEntityMelting(entity, stack);" },
       { "trigger": "removeRecipetmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.removeRecipe(output, optionalInput);" },
       { "trigger": "removeEntityMeltingtmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.removeEntityMelting(entity);" },
       { "trigger": "addRecipetmods.thermalexpansion.Centrifuge", "contents": "mods.thermalexpansion.Centrifuge.addRecipe(outputs[], input, fluid, energy);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Centrifuge", "contents": "mods.thermalexpansion.Centrifuge.removeRecipe(input);" },
       { "trigger": "addMintRecipetmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.addMintRecipe(output, input, energy);" },
       { "trigger": "addPressRecipetmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.addPressRecipe(output, input, energy);" },
       { "trigger": "addStorageRecipetmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.addStorageRecipe(output, input, energy);" },
       { "trigger": "removeMintRecipetmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.removeMintRecipe(input);" },
       { "trigger": "removePressRecipetmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.removePressRecipe(input);" },
       { "trigger": "removeStorageRecipetmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.removeStorageRecipe(input);" },
       { "trigger": "addRecipetmods.thermalexpansion.Crucible", "contents": "mods.thermalexpansion.Crucible.addRecipe(output, input, energy);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Crucible", "contents": "mods.thermalexpansion.Crucible.removeRecipe(input);" },
       { "trigger": "addRecipetmods.thermalexpansion.InductionSmelter", "contents": "mods.thermalexpansion.InductionSmelter.addRecipe(primaryOutput, primaryInput, secondaryInput, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
       { "trigger": "removeRecipetmods.thermalexpansion.InductionSmelter", "contents": "mods.thermalexpansion.InductionSmelter.removeRecipe(primaryInput, secondaryInput);" },
       { "trigger": "addRecipetmods.thermalexpansion.Infuser", "contents": "mods.thermalexpansion.Infuser.addRecipe(output, input, energy);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Infuser", "contents": "mods.thermalexpansion.Infuser.removeRecipe(input);" },
       { "trigger": "addRecipetmods.thermalexpansion.Insolator", "contents": "mods.thermalexpansion.Insolator.addRecipe(primaryOutput, primaryInput, secondaryInput, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Insolator", "contents": "mods.thermalexpansion.Insolator.removeRecipe(primaryInput, secondaryInput);" },
       { "trigger": "addRecipetmods.thermalexpansion.Pulverizer", "contents": "mods.thermalexpansion.Pulverizer.addRecipe(output, input, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Pulverizer", "contents": "mods.thermalexpansion.Pulverizer.removeRecipe(input);" },
       { "trigger": "addRecipetmods.thermalexpansion.RedstoneFurnace", "contents": "mods.thermalexpansion.RedstoneFurnace.addRecipe(output, input, energy);" },
       { "trigger": "removeRecipetmods.thermalexpansion.RedstoneFurnace", "contents": "mods.thermalexpansion.RedstoneFurnace.removeRecipe(input);" },
       { "trigger": "addRecipetmods.thermalexpansion.Refinery", "contents": "mods.thermalexpansion.Refinery.addRecipe(output, outputItem, input, energy);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Refinery", "contents": "mods.thermalexpansion.Refinery.removeRecipe(input);" },
       { "trigger": "addRecipetmods.thermalexpansion.Sawmill", "contents": "mods.thermalexpansion.Sawmill.addRecipe(output, input, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
       { "trigger": "removeRecipetmods.thermalexpansion.Sawmill", "contents": "mods.thermalexpansion.Sawmill.removeRecipe(input);" },
       { "trigger": "addExtractRecipetmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.addExtractRecipe(output, input, energy, optionalItemOut);" },
       { "trigger": "removeExtractRecipetmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.removeExtractRecipe(input);" },
       { "trigger": "addFillRecipetmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.addFillRecipe(output, input, fluid, energy);" },
       { "trigger": "removeFillRecipetmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.removeFillRecipe(input, fluid);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2, output3, output4);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2, output3, output4);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, fuelTime, power, heat, name);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
       { "trigger": "addRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2, output3, output4, fuelTime, power, heatVar);" },
       { "trigger": "removeRecipetmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2, output3, output4);" },
       { "trigger": "addDrillRecipetmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.addDrillRecipe(input, output);" },
       { "trigger": "addLaserRecipetmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.addLaserRecipe(input, output);" },
       { "trigger": "addDrillLaserRecipetmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.addDrillLaserRecipe(input, output);" },
       { "trigger": "removeDrillRecipetmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeDrillRecipe(output);" },
       { "trigger": "removeAllDrillRecipestmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllDrillRecipes();" },
       { "trigger": "removeLaserRecipetmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeLaserRecipe(output);" },
       { "trigger": "removeAllLaserRecipestmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllLaserRecipes();" },
       { "trigger": "removeDrillLaserRecipetmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeDrillLaserRecipe(output);" },
       { "trigger": "removeAllDrillLaserRecipestmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllDrillLaserRecipes();" },
       { "trigger": "removeAllRecipestmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllRecipes();" },
       { "trigger": "addRecipetmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.addRecipe(input, output);" },
       { "trigger": "addRecipetmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.addRecipe(input, output);" },
       { "trigger": "removeRecipetmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.removeRecipe(output);" },
       { "trigger": "removeAllRecipestmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.removeAllRecipes();" },
       { "trigger": "addRecipetmods.pneumaticcraft.pressurechamber", "contents": "mods.pneumaticcraft.pressurechamber.addRecipe(input[], pressure, output[]);" },
       { "trigger": "removeRecipetmods.pneumaticcraft.pressurechamber", "contents": "mods.pneumaticcraft.pressurechamber.removeRecipe(output[]);" },
       { "trigger": "removeAllRecipestmods.pneumaticcraft.pressurechamber", "contents": "mods.pneumaticcraft.pressurechamber.removeAllRecipes();" },
       { "trigger": "addRecipetmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.addRecipe(input, outputs[]);" },
       { "trigger": "removeRecipestmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.removeRecipes(input);" },
       { "trigger": "removeRecipetmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.removeRecipe(outputs[]);" },
       { "trigger": "removeAllRecipestmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.removeAllRecipes();" },
       { "trigger": "addRecipetmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.addRecipe(liquidInput, itemInput, pressure, temperature, output);" },
       { "trigger": "addRecipetmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.addRecipe(itemInput, pressure, temperature, output);" },
       { "trigger": "removeRecipetmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.removeRecipe(output);" },
       { "trigger": "removeAllRecipestmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.removeAllRecipes();" },
       { "trigger": "addShapedtmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShaped(name, stage, output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapedMirroredtmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapedMirrored(name, stage, output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapelesstmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapeless(name, stage, output, ingredients[], optionalFunction, optionalAction);" },
       { "trigger": "addShapedtmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShaped(stage, output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapedMirroredtmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapedMirrored(stage, output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapelesstmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapeless(stage, output, ingredients[], optionalFunction, optionalAction);" },
       { "trigger": "setRecipeStagetmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.setRecipeStage(stage, output);" },
       { "trigger": "setRecipeStagetmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.setRecipeStage(stage, recipeName);" },
       { "trigger": "addRecipetmods.techreborn.alloySmelter", "contents": "mods.techreborn.alloySmelter.addRecipe(output, input1, input2, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.alloySmelter", "contents": "mods.techreborn.alloySmelter.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.alloySmelter", "contents": "mods.techreborn.alloySmelter.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.assemblingMachine", "contents": "mods.techreborn.assemblingMachine.addRecipe(output, input1, input2, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.assemblingMachine", "contents": "mods.techreborn.assemblingMachine.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.assemblingMachine", "contents": "mods.techreborn.assemblingMachine.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.blastFurnace", "contents": "mods.techreborn.blastFurnace.addRecipe(output1, output2, input1, input2, ticktime, euTick, neededHeat);" },
       { "trigger": "removeInputRecipetmods.techreborn.blastFurnace", "contents": "mods.techreborn.blastFurnace.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.blastFurnace", "contents": "mods.techreborn.blastFurnace.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.centrifuge", "contents": "mods.techreborn.centrifuge.addRecipe(output1, output2, output3, output4, input1, input2, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.centrifuge", "contents": "mods.techreborn.centrifuge.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.centrifuge", "contents": "mods.techreborn.centrifuge.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.chemicalReactorRecipe", "contents": "mods.techreborn.chemicalReactorRecipe.addRecipe(output1, input1, input2, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.chemicalReactorRecipe", "contents": "mods.techreborn.chemicalReactorRecipe.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.chemicalReactorRecipe", "contents": "mods.techreborn.chemicalReactorRecipe.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.compressor", "contents": "mods.techreborn.compressor.addRecipe(output1, input1, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.compressor", "contents": "mods.techreborn.compressor.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.compressor", "contents": "mods.techreborn.compressor.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.addRecipe(topInput, bottomInput, output, startEU, euTick, tickTime);" },
       { "trigger": "removeTopInputRecipetmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.removeTopInputRecipe(iIngredient);" },
       { "trigger": "removeBottomInputRecipetmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.removeBottomInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.implosionCompressor", "contents": "mods.techreborn.implosionCompressor.addRecipe(output1, output2, input1, input2, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.implosionCompressor", "contents": "mods.techreborn.implosionCompressor.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.implosionCompressor", "contents": "mods.techreborn.implosionCompressor.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.industrialElectrolyzer", "contents": "mods.techreborn.industrialElectrolyzer.addRecipe(output1, output2, output3, output4, cells, input2, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.industrialElectrolyzer", "contents": "mods.techreborn.industrialElectrolyzer.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.industrialElectrolyzer", "contents": "mods.techreborn.industrialElectrolyzer.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.grinder", "contents": "mods.techreborn.grinder.addRecipe(output1, output2, output3, output4, input1, input2, ticktime, euTick);" },
       { "trigger": "addRecipetmods.techreborn.grinder", "contents": "mods.techreborn.grinder.addRecipe(output1, output2, output3, output4, input1, input2, fluid, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.grinder", "contents": "mods.techreborn.grinder.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.grinder", "contents": "mods.techreborn.grinder.removeRecipe(output);" },
       { "trigger": "addRecipetmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, fluid, ticktime, euTick);" },
       { "trigger": "addRecipetmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, ticktime, euTick);" },
       { "trigger": "addRecipetmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, ticktime, euTick, useOreDic);" },
       { "trigger": "addRecipetmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, fluid, ticktime, euTick, useOreDic);" },
       { "trigger": "removeInputRecipetmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.removeRecipe(output);" },
       { "trigger": "addShapedtmods.techreborn.rollingMachine", "contents": "mods.techreborn.rollingMachine.addShaped(output, ingredients[][]);" },
       { "trigger": "addShapelesstmods.techreborn.rollingMachine", "contents": "mods.techreborn.rollingMachine.addShapeless(output, ingredients[]);" },
       { "trigger": "removeRecipetmods.techreborn.rollingMachine", "contents": "mods.techreborn.rollingMachine.removeRecipe(output);" },
       { "trigger": "addScrapboxDroptmods.techreborn.scrapbox", "contents": "mods.techreborn.scrapbox.addScrapboxDrop(input);" },
       { "trigger": "addRecipetmods.techreborn.vacuumFreezer", "contents": "mods.techreborn.vacuumFreezer.addRecipe(output, input, ticktime, euTick);" },
       { "trigger": "removeInputRecipetmods.techreborn.vacuumFreezer", "contents": "mods.techreborn.vacuumFreezer.removeInputRecipe(iIngredient);" },
       { "trigger": "removeRecipetmods.techreborn.vacuumFreezer", "contents": "mods.techreborn.vacuumFreezer.removeRecipe(output);" },
       { "trigger": "addGeneralCraftingStagetmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralCraftingStage(stage);" },
       { "trigger": "addGeneralPartReplacingStagetmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralPartReplacingStage(stage);" },
       { "trigger": "addGeneralPartBuildingStagetmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralPartBuildingStage(stage);" },
       { "trigger": "addGeneralModifierStagetmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralModifierStage(stage);" },
       { "trigger": "addToolTypeStagetmods.TinkerStages", "contents": "mods.TinkerStages.addToolTypeStage(stage, toolType);" },
       { "trigger": "addMaterialStagetmods.TinkerStages", "contents": "mods.TinkerStages.addMaterialStage(stage, material);" },
       { "trigger": "addModifierStagetmods.TinkerStages", "contents": "mods.TinkerStages.addModifierStage(stage, modifier);" },
       { "trigger": "addShapedtmods.vctweaker", "contents": "mods.vctweaker.addShaped(output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapedMirroredtmods.vctweaker", "contents": "mods.vctweaker.addShapedMirrored(output, ingredients[][], optionalFunction, optionalAction);" },
       { "trigger": "addShapelesstmods.vctweaker", "contents": "mods.vctweaker.addShapeless(output, ingredients[], optionalFunction, optionalAction);" },
       { "trigger": "addWailaStagetmods.WailaStages", "contents": "mods.WailaStages.addWailaStage(stage);" },
       { "trigger": "addRequirementtmods.WailaStages", "contents": "mods.WailaStages.addRequirement(stage, prefix);" }
    ]
 }
  `

  let data = JSON.parse(raw)

  data = data.completions.map(c => c.contents)
  console.log(data)
  
  let newData = {}

  data.forEach(d => {
    d = d.split("(")[0]
    let parts = d.split(".")
    let obj = {}

    assign(obj, parts, () => {})

    newData = mergeDeep(newData, obj)
  })

  console.log(JSON.stringify(newData, function(key, val) {
    if (typeof val === 'function') {
      return val + ''; // implicitly `toString` it
    }
    return val;
  }))
}

function assign(obj, keyPath, value) {
  let lastKeyIndex = keyPath.length-1;
  for (var i = 0; i < lastKeyIndex; ++ i) {
    let key
    if (i == lastKeyIndex) {    
      key = keyPath[i]
      console.log(key)
    } else
      key = keyPath[i]
    if (!(key in obj))
      obj[key] = {}
    obj = obj[key]
  }
  obj[keyPath[lastKeyIndex]] = value
}

/**
 * Simple object check.
 * @param item
 * @returns {boolean}
 */
function isObject(item) {
  return (item && typeof item === 'object' && !Array.isArray(item));
}

/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
function mergeDeep(target, ...sources) {
  if (!sources.length) return target;
  const source = sources.shift();

  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key]) Object.assign(target, { [key]: {} });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
  }

  return mergeDeep(target, ...sources);
}